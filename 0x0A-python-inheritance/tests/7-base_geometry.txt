The ``7-base_geometry`` module
==================================================

Using ``integer_validator``
--------------------------------------------------

This is a 7-base_geometry test file in restructuredTextFormat. First import
``integer_validator from the ``7-base_geometry`` module:

    Test case 0: importing the module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:
    Test case 1: value is an integer
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

    Test case 2: value is a string
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", '12')
    Traceback (most recent call last):
        ...
    TypeError: my_int must be an integer

    Test case 3: value is 0
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
        ...
    ValueError: my_int must be greater than 0

    Test case 4: value is less than 0
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", -4)
    Traceback (most recent call last):
        ...
    ValueError: my_int must be greater than 0

    Test case 5: value is a string using try...except
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case 6: value is 0
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    Test case 7: value is less than 0
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

    Test case 8: value is True
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("distance", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer
